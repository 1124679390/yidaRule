name: Release

on:
  workflow_dispatch:

env:
  LLVM_VERSION: '10.0'
  RUST_TOOLCHAIN: nightly-2023-10-31
  NDK_VERSION: 25.2.9519653
  FLUTTER_VERSION: '3.18.0-0.2.pre'
  FLUTTER_CHANNEL: 'beta'
  FRB_VERSION: 'v2.0.0-dev.9'

jobs:

  ci-pass:
    name: CI is green
    runs-on: ubuntu-latest
    needs:
      - check_release
      - build_release_assets
    steps:
      - run: exit 0

  check_release:
    name: Check release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: xiaohucode/yida
          path: 'yida'
          token: ${{ secrets.GH_PAT }}
    
      - name: Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          override: true

      - name: Cargo ci build cache
        uses: actions/cache@v3
        with:
          path: |
            yida/ci/target/
          key: ${{ runner.os }}-cargo-ci_target

      - name: Check release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd yida/ci
          cargo run --release --bin check-release


  build_release_assets:
    name: Build release assets
    needs:
      - check_release
    strategy:
      fail-fast: false
      matrix:
        config:
          # - target: linux
          #   host: ubuntu-latest
          # - target: windows
          #   host: windows-latest
          # - target: macos
          #   host: macos-13
          - target: ios
            host: macos-13
          - target: android-arm32
            host: ubuntu-latest
          - target: android-arm64
            host: ubuntu-latest
          # - target: android-x86_64
          #   host: ubuntu-latest

    runs-on: ${{ matrix.config.host }}

    env:
      TARGET: ${{ matrix.config.target }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: xiaohucode/yida
          path: 'yida'
          token: ${{ secrets.GH_PAT }}

      - name: Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-
          
      # - name: Install Windows10-Sdk
      #   if: matrix.config.target == 'windows'
      #   uses: GuillaumeFalourd/setup-windows10-sdk-action@v1.12
      #   with:
      #     sdk-version: 22621
          
      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          components: rustfmt
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          override: true

      - name: Cargo ci build cache
        uses: actions/cache@v3
        with:
          path: |
            yida/ci/target/
          key: ${{ runner.os }}-cargo-ci_target

      - id: check_asset
        name: Check asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd yida/ci
          cargo run --release --bin check-asset

      - name: Setup xcode
        if: steps.check_asset.outputs.skip_build != 'true' && ( matrix.config.target == 'ios' || matrix.config.target == 'macos')
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '14.3.1'
          
      - name: Setup java (Android)
        if: steps.check_asset.outputs.skip_build != 'true' && ( matrix.config.target == 'android-arm32' || matrix.config.target == 'android-arm64' || matrix.config.target == 'android-x86_64' )
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu'

      - name: Setup android tools (Android)
        if: steps.check_asset.outputs.skip_build != 'true' && ( matrix.config.target == 'android-arm32' || matrix.config.target == 'android-arm64' || matrix.config.target == 'android-x86_64' )
        uses: maxim-lobanov/setup-android-tools@v1
        with:
          packages: |
            platform-tools
              platforms;android-33
              build-tools;33.0.0
              ndk;${{ env.NDK_VERSION }}
            

      - name: Check bridge
        if: steps.check_asset.outputs.skip_build != 'true'
        uses: actions/checkout@v3
        with:
          repository: 'fzyzcjy/flutter_rust_bridge'
          path: 'flutter_rust_bridge'
          ref: ${{ env.FRB_VERSION }}

      - name: Install flutter_rust_bridge
        if: steps.check_asset.outputs.skip_build != 'true'
        run: |
          cd flutter_rust_bridge/frb_codegen
          cargo install --path . --force
          cd ../..

      - name: Install cargo-expand
        if: steps.check_asset.outputs.skip_build != 'true'
        run: |
          cargo install cargo-expand --force
      
      - name: Setup flutter
        if: steps.check_asset.outputs.skip_build != 'true'
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          flutter-version: ${{ env.FLUTTER_VERSION }}
          architecture: x64

      - name: Cache Flutter dependencies (Linux/Android)
        if: steps.check_asset.outputs.skip_build != 'true' && ( matrix.config.target == 'android-arm32' || matrix.config.target == 'android-arm64' || matrix.config.target == 'android-x86_64' || matrix.config.target == 'linux' )
        uses: actions/cache@v3
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.os }}-flutter

      - name: Install LLVM and Clang (Linux/Android)
        if: steps.check_asset.outputs.skip_build != 'true' && ( matrix.config.target == 'android-arm32' || matrix.config.target == 'android-arm64' || matrix.config.target == 'android-x86_64' || matrix.config.target == 'linux' )
        run: |
          sudo apt update
          sudo apt install -y libclang-dev

      - name: Install libfuse2 (Linux)
        if: steps.check_asset.outputs.skip_build != 'true' && matrix.config.target == 'linux'
        run: |
          sudo apt update
          sudo apt install -y libfuse2

      - name: Install cargo tools (non-android)
        if: steps.check_asset.outputs.skip_build != 'true' && ( matrix.config.target == 'macos' || matrix.config.target == 'windows' || matrix.config.target == 'linux' )
        run: |
          cargo install cbindgen

      - name: Install cargo tools (Android)
        if: steps.check_asset.outputs.skip_build != 'true' && ( matrix.config.target == 'android-arm32' || matrix.config.target == 'android-arm64' || matrix.config.target == 'android-x86_64' )
        run: |
          cargo install cargo-ndk

      - name: Cargo native build cache
        if: steps.check_asset.outputs.skip_build != 'true'
        uses: actions/cache@v3
        with:
          path: |
            yida/rust/target/
          key: ${{ runner.os }}-cargo-native_target-${{ matrix.config.target }}

      - name: Install rust target and build (ios)
        if: steps.check_asset.outputs.skip_build != 'true' && ( matrix.config.target == 'ios')
        run: |
          rustup target install aarch64-apple-ios
          cd yida
          flutter pub get
          flutter pub upgrade
          flutter_rust_bridge_codegen generate 
          flutter build ios --target=lib/main2.dart --obfuscate --split-debug-info=./symbol --no-simulator --no-codesign --release
          cd build
          rm -rf Payload
          mkdir Payload
          mv ios/iphoneos/Runner.app Payload/
          sh ../scripts/thin-payload.sh Payload
          zip -r -9 release.ipa Payload
          cd ..

      - name: Install LLVM and Clang (Linux/Android)
        if: steps.check_asset.outputs.skip_build != 'true' && ( matrix.config.target == 'android-arm32' || matrix.config.target == 'android-arm64' || matrix.config.target == 'android-x86_64' ) && !startsWith(matrix.config.flutter_version, '2')
        run: |
          cd yida
          flutter pub get
          flutter_rust_bridge_codegen generate 

      - name: Install rust target and build (Android-arm64)
        if: steps.check_asset.outputs.skip_build != 'true' && ( matrix.config.target == 'android-arm64')
        run: |
          export ANDROID_NDK_HOME=$ANDROID_HOME/ndk/${{ env.NDK_VERSION }}
          export ANDROID_NDK_ROOT=$ANDROID_NDK_HOME
          PATH=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin:$ANDROID_NDK_ROOT/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin:$PATH
          wget https://www.openssl.org/source/openssl-3.2.0.tar.gz
          tar -xzvf openssl-3.2.0.tar.gz
          cd openssl-3.2.0
          ./Configure android-arm64
          make
          sudo make install
          export OPENSSL_DIR=/usr/local
          export OPENSSL_STATIC=1
          cd ..
          rustup target install aarch64-linux-android
          cd yida
          flutter pub get
          flutter pub upgrade
          flutter build apk --target=lib/main2.dart --target-platform android-arm64 --obfuscate --split-debug-info=./symbol --split-per-abi

      - name: Install rust target and build (Android-arm32)
        if: steps.check_asset.outputs.skip_build != 'true' && ( matrix.config.target == 'android-arm32')
        run: |
          export ANDROID_NDK_HOME=$ANDROID_HOME/ndk/${{ env.NDK_VERSION }}
          export ANDROID_NDK_ROOT=$ANDROID_NDK_HOME
          PATH=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin:$ANDROID_NDK_ROOT/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin:$PATH
          wget https://www.openssl.org/source/openssl-3.2.0.tar.gz
          tar -xzvf openssl-3.2.0.tar.gz
          cd openssl-3.2.0
          ./Configure android-arm
          make
          sudo make install
          export OPENSSL_DIR=/usr/local
          export OPENSSL_STATIC=1
          cd ..
          rustup target install armv7-linux-androideabi
          cd yida
          flutter pub get
          flutter pub upgrade
          flutter build apk --target=lib/main2.dart --target-platform android-arm --obfuscate --split-debug-info=./symbol --split-per-abi

      - name: Install rust target and build (Android-x86_64)
        if: steps.check_asset.outputs.skip_build != 'true' && ( matrix.config.target == 'android-x86_64')
        run: |
          export ANDROID_NDK_HOME=$ANDROID_HOME/ndk/${{ env.NDK_VERSION }}
          export ANDROID_NDK_ROOT=$ANDROID_NDK_HOME
          PATH=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin:$ANDROID_NDK_ROOT/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin:$PATH
          wget https://www.openssl.org/source/openssl-3.2.0.tar.gz
          tar -xzvf openssl-3.2.0.tar.gz
          cd openssl-3.2.0
          ./Configure android-x86_64
          make
          sudo make install
          export OPENSSL_DIR=/usr/local
          export OPENSSL_STATIC=1
          cd ..
          rustup target install x86_64-linux-android
          cd yida
          flutter build apk --target=lib/main2.dart --target-platform android-x64 --obfuscate --split-debug-info=./symbol --split-per-abi

      - name: Install dependencies and build (Linux)
        if: steps.check_asset.outputs.skip_build != 'true' && matrix.config.target == 'linux'
        run: |
          sudo apt-get update
          sudo apt install -y ninja-build liblzma-dev libgtk-3-dev libgl1-mesa-dev xorg-dev
          curl -JOL https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod a+x appimagetool-x86_64.AppImage
          mv appimagetool-x86_64.AppImage appimagetool
          cd yida
          flutter pub get
          flutter_rust_bridge_codegen generate 
          flutter config --enable-linux-desktop
          flutter build linux --release
          mv build/linux/x64/release/bundle/{yida,AppRun}
          cp linux/appimage/* build/linux/x64/release/bundle/
          ../appimagetool build/linux/x64/release/bundle/
          mv *.AppImage build/linux.AppImage

      - name: build (windows)
        if: steps.check_asset.outputs.skip_build != 'true' && matrix.config.target == 'windows'
        run: |
          cd yida
          flutter pub get
          flutter_rust_bridge_codegen generate 
          flutter config --enable-windows-desktop
          flutter build windows --target=lib/main2.dart
          cd build/windows/x64/runner/Release
          Compress-Archive * ../../../../build/windows.zip
          cd ../../../..

      - name: Build (macos)
        if: steps.check_asset.outputs.skip_build != 'true' && matrix.config.target == 'macos'
        run: |
          cd yida
          flutter pub get
          flutter_rust_bridge_codegen generate 
          rustup target install x86_64-apple-darwin
          rustup target install aarch64-apple-darwin
          flutter config --enable-macos-desktop
          flutter build macos --target=lib/main2.dart
          cd build
          mkdir appimage
          mv macos/Build/Products/Release/yida.app appimage/
          ln -sf /Applications appimage/
          hdiutil create -volname yida -srcfolder appimage -ov -format UDBZ macos.dmg
          cd ..

      - name: Cargo ci build cache
        if: steps.check_asset.outputs.skip_build != 'true'
        uses: actions/cache@v3
        with:
          path: |
            yida/ci/target/
          key: ${{ runner.os }}-cargo-ci_target

      - name: Upload Asset (All)
        if: steps.check_asset.outputs.skip_build != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd yida/ci
          cargo run --release --bin upload-asset
